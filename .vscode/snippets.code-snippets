{
  // Place your auth-service-api workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Controller": {
    "prefix": "controller",
    "body": [
      "import { NextFunction, Request, Response } from 'express'",
      "import BaseController from './base.controller'",
      "\n",
      "class ${1:nameController} extends BaseController {",
      "  constructor() {",
      "    super()",
      "    this.configureRoutes()",
      "  }",
      "  private methodName = async (req: Request, res: Response, next: NextFunction) => {",
      "    try {",
      "           // your code gose here",
      "    } catch (error) {",
      "      next(error)",
      "    }",
      "  }",

      "  /**",
      "   * configure router",
      "   */",
      "  configureRoutes() {",
      "    this.router.post('/', this.methodName)",
      "    // this._showRoutes()",
      "  }",
      "}",
      "export default new ${1:nameController}()"
    ],
    "description": "Controller"
  },
  "Method": {
    "prefix": "method",
    "body": [
      "private ${1:controllerName} = async (req: Request, res: Response, next: NextFunction): Promise<void> => {",
      "    try {",
      "        const {} = req.params",
      "        const {} = req.body",
      "        const {} = req.query",
      "        $2",
      "    } catch (error) {",
      "        next(error);",
      "    }",
      "};"
    ],
    "description": "Simple Controller Method"
  },
  "ValidationMethod": {
    "prefix": "valiMethod",
    "body": [
      "private ${1:controllerName} = async (req: Request, res: Response, next: NextFunction): Promise<void> => {",
      "    const {} = req.params",
      "    const {} = req.body",
      "    const {} = req.query",
      "    /**",
      "     * Validation",
      "     */",
      "    const errors: ErrorType = {}",
      "    // here gose your validation rules",
      "    if (Object.keys(errors).length) {",
      "      res.status(400).json(errors)",
      "      return",
      "    }",
      "    try {",
      "        $2",
      "    } catch (error) {",
      "        next(error);",
      "    }",
      "};"
    ],
    "description": "Simple Controller Method"
  }
}
