// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id        String    @id @default(uuid())
  fullname       String    @db.VarChar(100)
  username       String    @db.VarChar(50)
  email          String
  hashedPassword String
  avater         String?
  gender         Gender    @default(NONE)
  role           Role      @default(USER)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  user_activities user_activities[]
  reset_passwords reset_passwords[]
  providers       providers[]
  consumers       consumers[]

  @@index([username, email])
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum Role {
  ADMIN
  PROVIDER
  USER
}

model plans {
  plan_id     String      @id @default(uuid())
  name        String      @db.VarChar(50)
  description String?
  features    String?
  plan_limit  Int
  status      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  providers   providers[]
}

model providers {
  provider_id      String     @id @default(uuid())
  plans            plans      @relation(fields: [plan_id], references: [plan_id])
  plan_id          String
  users            users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id          String
  organize_name    String     @db.VarChar(100)
  api_key          String     @unique @db.VarChar(30)
  organize_domains String?
  status           ProvStatus @default(ACTIVE)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?

  consumers       consumers[]
  user_activities user_activities[]
  reset_passwords reset_passwords[]

  @@index([api_key])
}

enum ProvStatus {
  ACTIVE
  CANCELED
  SUSPEND
  EXPIRED
}

model consumers {
  consumer_id String    @id @default(uuid())
  users       users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id     String
  providers   providers @relation(fields: [provider_id], references: [provider_id], onDelete: Cascade)
  provider_id String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model user_activities {
  user_activity_id String     @id @default(uuid())
  users            users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id          String
  providers        providers? @relation(fields: [provider_id], references: [provider_id], onDelete: Cascade)
  provider_id      String?
  action           String
  user_agent       String?
  user_ip          String?
  frames           Int        @default(1)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model reset_passwords {
  reset_password_id String     @id @default(uuid())
  users             users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id           String
  providers         providers? @relation(fields: [provider_id], references: [provider_id], onDelete: Cascade)
  provider_id       String?
  last_pwd_hashed   String
  active            Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}
